package List;


/*
    ArrayList : 배열을 이용해 만든 리스트

    init : 그냥 초기화하면 0, 숫자를 넣어서 초기화하면 해당 값으로 기본 값을 설정해준다.

    pop : 맨 마지막 데이터를 빼온다. index로 중간에 있는 것을 가져올 수도 있다. 값이 없는 경우 null을 반환한다.

    push : 맨 마지막에 데이터를 넣는다.

    get : 맨 마지막 데이터 또는 특정 index의 데이터를 확인한다. 유효하지 않은 인덱스가 입력되면 null을 반환한다.

    isEmpty : 비었는지 확인한다.

    isFull : 현재 사이즈가 모두 찼는지 확인한다.
*/

public class LinkedList<T>{

    private final int size;
    private int index;

    private final T[];

    public ArrayList(){
        this.T[] arr = new T[defaultArrSize];
        this.size = defaultArrSize;
        this.index = 0;
    }

    public ArrayList(int size){
        this.index = 0;
        if(size < 0){
            this.arr= new T[defaultArrSize];
            this.size = defaultArrSize;
        } else {
            this.arr = new T[size];
            this.size = size;
        }
    }

    public isEmpty(){
        return index == 0 ? true : false;
    }

    public isFull(){
        return index + 1 >= size ? true : false;
    }

    public boolean push(T data){
        if(isFull())
            return false;

        arr[index++] = data;
        return true;
    }

    public boolean push(T data, int inx){
        if(isFull() || inx >= size || inx < 0)
            return false;

        for(int i = this.index++; i >= inx; i--){
            arr[i+1] = arr[i];
        }
        arr[inx] = data;
        return true;
    }

    public T pop(){
        if(isEmpty())
            return null;

        T retVal = arr[this.index];
        arr[this.index--] = null;
        return retVal;
    }

    public T pop(int inx){
        if(isEmpty() || inx >= size || inx <0)
            return null;

        T retVal = arr[inx];

        for(inx i = inx; i < index; i--){
           arr[i] = arr[i+1]
        }
        arr[this.index--] = null;

        return retVal;
    }

    public T get(){
        if(isEmpty())
            return null;

        return arr[this.index]
    }

    public T get(int inx){
        if(isEmpty() || inx >= size || inx <0)
            return null;
        return arr[inx];
    }

    class Node<T>{
        private T data;
        private
    }
}